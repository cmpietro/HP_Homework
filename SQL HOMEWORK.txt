Employee Database: A Mystery in Two Parts

Background

It is a beautiful spring day, and it is two weeks since you have been hired as a new data engineer at Pewlett Hackard. Your first major task is a research project on employees of the corporation from the 1980s and 1990s. All that remain of the database of employees from that period are six CSV files.

In this assignment, you will design the tables to hold data in the CSVs, import the CSVs into a SQL database, and answer questions about the data. In other words, you will perform:


Data Modeling
Data Engineering
Data Analysis

Instructions

Data Modeling

Inspect the CSVs and sketch out an ERD of the tables. Feel free to use a tool like http://www.quickdatabasediagrams.com.

Data Engineering

Use the information you have to create a table schema for each of the six CSV files. Remember to specify data types, primary keys, foreign keys, and other constraints.
Import each CSV file into the corresponding SQL table.

Data Analysis
Once you have a complete database, do the following:

List the following details of each employee: employee number, last name, first name, gender, and salary.
List employees who were hired in 1986.
List the manager of each department with the following information: department number, department name, the manager's employee number, last name, first name, and start and end employment dates.
List the department of each employee with the following information: employee number, last name, first name, and department name.
List all employees whose first name is "Hercules" and last names begin with "B."
List all employees in the Sales department, including their employee number, last name, first name, and department name.
List all employees in the Sales and Development departments, including their employee number, last name, first name, and department name.
In descending order, list the frequency count of employee last names, i.e., how many employees share each last name.

Bonus (Optional)

As you examine the data, you are overcome with a creeping suspicion that the dataset is fake. You surmise that your boss handed you spurious data in order to test the data engineering skills of a new employee. To confirm your hunch, you decide to take the following steps to generate a visualization of the data, with which you will confront your boss:

Import the SQL database into Pandas. (Yes, you could read the CSVs directly in Pandas, but you are, after all, trying to prove your technical mettle.) This step may require some research. Feel free to use the code below to get started. Be sure to make any necessary modifications for your username, password, host, port, and database name:


   from sqlalchemy import create_engine
   engine = create_engine('postgresql://localhost:5432/<your_db_name>')
   connection = engine.connect()

Consult SQLAlchemy documentation for more information.
If using a password, do not upload your password to your GitHub repository. See https://www.youtube.com/watch?v=2uaTPmNvH0I and https://martin-thoma.com/configuration-files-in-python/ for more information.


Create a bar chart of average salary by title.
You may also include a technical report in markdown format, in which you outline the data engineering steps taken in the homework assignment.

Epilogue

Evidence in hand, you march into your boss's office and present the visualization. With a sly grin, your boss thanks you for your work. On your way out of the office, you hear the words, "Search your ID number." You look down at your badge to see that your employee ID number is 499942.

Submission

Create an image file of your ERD.
Create a .sql file of your table schemata.
Create a .sql file of your queries.
(Optional) Create a Jupyter Notebook of the bonus analysis.
Create and upload a repository with the above files to GitHub and post a link on BootCamp Spot.

IMPORT SET UP FROM ....

SELECT 'postgresql' AS dbms,t.table_catalog,t.table_schema,t.table_name,c.column_name,c.ordinal_position,c.data_type,c.character_maximum_length,n.constraint_type,k2.table_schema,k2.table_name,k2.column_name FROM information_schema.tables t NATURAL LEFT JOIN information_schema.columns c LEFT JOIN(information_schema.key_column_usage k NATURAL JOIN information_schema.table_constraints n NATURAL LEFT JOIN information_schema.referential_constraints r)ON c.table_catalog=k.table_catalog AND c.table_schema=k.table_schema AND c.table_name=k.table_name AND c.column_name=k.column_name LEFT JOIN information_schema.key_column_usage k2 ON k.position_in_unique_constraint=k2.ordinal_position AND r.unique_constraint_catalog=k2.constraint_catalog AND r.unique_constraint_schema=k2.constraint_schema AND r.unique_constraint_name=k2.constraint_name WHERE t.TABLE_TYPE='BASE TABLE' AND t.table_schema NOT IN('information_schema','pg_catalog');

__________________________

--Homework HP --
-- CREATE tables to hold employee data
-- CREATE table department2
--DROP Table department2

CREATE Table department2
(
	dept_no  VARCHAR (10) NOT NULL,
	--dept_ID serial (Removed)
	dept_name  VARCHAR (50),
	--PRIMARY KEY (dept_ID)
	PRIMARY KEY (dept_no)
);

-- Review table structure
SELECT *
from department2;

--IMPORT Data into table

-- Review table data
SELECT *
from department2;

--Create table employees; drop in case of issues
--DROP Table employees; 
CREATE Table employees (
	--emp_ID serial,
	emp_no VARCHAR (10) NOT NULL,
	birth_date DATE  NOT NULL,
	last_name VARCHAR (50) NOT NULL,
	first_name VARCHAR (50) NOT NULL,
	gender CHAR (1) NOT NULL,
	hire_date DATE NOT NULL,
	--PRIMARY KEY (emp_ID)
	PRIMARY KEY (emp_no)
);

-- View Table --
SELECT *
from employees;

--IMPORT Data into table

-- View Table data --
SELECT *
from employees;

-- Create table dept_emp 
--DROP table dept_emp;
CREATE Table dept_emp(
	--deptemp_ID serial,
	emp_no VARCHAR (10) NOT NULL,
	dept_no VARCHAR (10) NOT NULL,
	from_date DATE NOT NULL,
	to_date DATE NOT NULL,
	--PRIMARY KEY (deptemp_ID)
	FOREIGN KEY (emp_no) REFERENCES employees(emp_no),
	FOREIGN KEY (dept_no) REFERENCES department2(dept_no)
);

--Check table output --
SELECT *
from dept_emp;

--IMPORT Data into table
--Check table data --
SELECT *
from dept_emp;


--Create dept_manager
--DROP Table dept_manager;
CREATE Table dept_manager(
	emp_no VARCHAR (10) NOT NULL,
	dept_no VARCHAR (10) NOT NULL,
	from_date DATE NOT NULL,
	to_date DATE NOT NULL
);

--Check table --
SELECT *
from dept_manager;

ALTER TABLE "dept_manager" ADD CONSTRAINT "fk_dept_manager_dept_no" FOREIGN KEY("dept_no")
REFERENCES "department2" ("dept_no");

ALTER TABLE "dept_manager" ADD CONSTRAINT "fk_dept_manager_emp_no" FOREIGN KEY("emp_no")
REFERENCES "employees" ("emp_no");


--IMPORT data into table
--Check table data --
SELECT *
from dept_manager;


-- CREATE table for salaries
--DROP Table salaries;
CREATE Table salaries
(	emp_no VARCHAR (10) NOT NULL,
	salary INTEGER NOT NULL,
	from_date DATE NOT NULL,
	to_date DATE NOT NULL,
	FOREIGN KEY (emp_no) REFERENCES employees(emp_no)
);

--Check table output
SELECT *
from salaries;

--IMPORT data into table
--Check table data
SELECT *
from salaries;

--CREATE table for titles
--DROP Table titles;
CREATE Table titles
(	emp_no VARCHAR (10) NOT NULL,
	title VARCHAR (25) NOT NULL,
	from_date DATE NOT NULL,
	to_date DATE NOT NULL,
	FOREIGN KEY (emp_no) REFERENCES employees(emp_no)
);


--Check tablel output
SELECT *
from titles;

--IMPORT data into table
--Check table data
SELECT *
from titles;

-- LIST the following details of each employee: employee number, last name, first name, gender, and salary.

SELECT emp_no, first_name, last_name, gender
FROM employees
WHERE emp_no IN
(
	SELECT salary, emp_no
	FROM salaries
);

--List employees who were hired in 1986.
SELECT first_name, last_name, hire_date 
FROM employees
WHERE hire_date BETWEEN '1986-01-01' AND '1987-01-01';

--List the manager of each department with the following information: department number, department name, the manager's employee number, 
--last name, first name, and start and end employment dates.
SELECT department2.dept_no, department2.dept_name, dept_manager.emp_no, employees.last_name, employees.first_name, dept_manager.from_date, dept_manager.to_date
FROM department2
JOIN dept_manager
ON department2.dept_no = dept_manager.dept_no
JOIN employees
ON dept_manager.emp_no = employees.emp_no;

--List the department of each employee with the following information: employee number, last name, first name, and department name.
SELECT dept_emp.emp_no, employees.last_name, employees.first_name, department2.dept_name
FROM dept_emp
JOIN employees
ON dept_emp.emp_no = employees.emp_no
JOIN department2
ON dept_emp.dept_no = department2.dept_no;


--List all employees whose first name is "Hercules" and last names begin with "B."
SELECT first_name, last_name
FROM employees
WHERE first_name = 'Hercules'
AND last_name LIKE 'B%';


--List all employees in the Sales department, including their employee number, last name, first name, and department name.
SELECT dept_emp.emp_no, employees.last_name, employees.first_name, department2.dept_name
FROM dept_emp
JOIN employees
ON dept_emp.emp_no = employees.emp_no
JOIN department2
ON dept_emp.dept_no = department2.dept_no
WHERE department2.dept_name = 'Sales';

--List all employees in the Sales and Development departments, including their employee number, last name, first name, and department name.
SELECT dept_emp.emp_no, employees.last_name, employees.first_name, department2.dept_name
FROM dept_emp
JOIN employees
ON dept_emp.emp_no = employees.emp_no
JOIN department2
ON dept_emp.dept_no = department2.dept_no
WHERE department2.dept_name = 'Sales' 
OR department2.dept_name = 'Development';


--In descending order, list the frequency count of employee last names, i.e., how many employees share each last name.
SELECT last_name,
COUNT(last_name) AS "frequency"
FROM employees
GROUP BY last_name
ORDER BY
COUNT(last_name) DESC;

Final: 

--Homework HP --
--DATA ENGINEERING -- 
--LESSON LEARNED:  1. KISS  2. PAY ATTENTION TO THE ORDER OF THE COLUMNS! 
-- CREATE tables to hold employee data
-- CREATE table department2
--DROP Table department2

CREATE Table department2
(
	dept_no  VARCHAR (10) NOT NULL,
	--dept_ID serial (Removed)
	dept_name  VARCHAR (50),
	--PRIMARY KEY (dept_ID)
	PRIMARY KEY (dept_no)
);

-- Review table structure
SELECT *
from department2;

--IMPORT Data into table

-- Review table data
SELECT *
from department2;

--Create table employees; drop in case of issues
--DROP Table employees; 
CREATE Table employees (
	--emp_ID serial,
	emp_no INT NOT NULL,
	birth_date DATE  NOT NULL,
	first_name VARCHAR (50) NOT NULL,
	last_name VARCHAR (50) NOT NULL,
	gender CHAR (1) NOT NULL,
	hire_date DATE NOT NULL,
	--PRIMARY KEY (emp_ID)
	PRIMARY KEY (emp_no)
);

-- View Table --
SELECT *
from employees;

--IMPORT Data into table

-- View Table data --
SELECT *
from employees;

-- Create table dept_emp 
--DROP table dept_emp;
CREATE Table dept_emp(
	--deptemp_ID serial,
	emp_no INT NOT NULL,
	dept_no VARCHAR (10) NOT NULL,
	from_date DATE NOT NULL,
	to_date DATE NOT NULL,
	--PRIMARY KEY (deptemp_ID)
	FOREIGN KEY (emp_no) REFERENCES employees(emp_no),
	FOREIGN KEY (dept_no) REFERENCES department2(dept_no)
);

--Check table output --
SELECT *
from dept_emp;

--IMPORT Data into table
--Check table data --
SELECT *
from dept_emp;


--Create dept_manager
--DROP Table dept_manager;
CREATE Table dept_manager(
	dept_no VARCHAR (10) NOT NULL,
	emp_no INT NOT NULL,
	from_date DATE NOT NULL,
	to_date DATE NOT NULL,
	FOREIGN KEY (emp_no) REFERENCES employees(emp_no),
	FOREIGN KEY (dept_no) REFERENCES department2(dept_no)
	
);

--Check table --
SELECT *
from dept_manager;

--IMPORT data into table
--Check table data --
SELECT *
from dept_manager;


-- CREATE table for salaries
--DROP Table salaries;
CREATE Table salaries
(	emp_no INT NOT NULL,
	salary INTEGER NOT NULL,
	from_date DATE NOT NULL,
	to_date DATE NOT NULL,
	FOREIGN KEY (emp_no) REFERENCES employees(emp_no)
);

--Check table output
SELECT *
from salaries;

--IMPORT data into table
--Check table data
SELECT *
from salaries;

--CREATE table for titles
--DROP Table titles;
CREATE Table titles
(	emp_no INT NOT NULL,
	title VARCHAR (25) NOT NULL,
	from_date DATE NOT NULL,
	to_date DATE NOT NULL,
	FOREIGN KEY (emp_no) REFERENCES employees(emp_no)
);


--Check tablel output
SELECT *
from titles;

--IMPORT data into table
--Check table data
SELECT *
from titles;

-- LIST the following details of each employee: employee number, last name, first name, gender, and salary.

SELECT emp_no, first_name, last_name, gender
FROM employees
WHERE emp_no IN
(
	SELECT salary, emp_no
	FROM salaries
);

--List the following details of each employee: employee number, last name, first name, gender, and salary.
SELECT employees.emp_no, employees.last_name, employees.first_name, employees.gender, salaries.salary
FROM employees
JOIN salaries 
ON employees.emp_no = salaries.emp_no;


--List employees who were hired in 1986.
SELECT first_name, last_name, hire_date 
FROM employees
WHERE hire_date BETWEEN '1986-01-01' AND '1987-01-01';

--List the manager of each department with the following information: department number, department name, the manager's employee number, 
--last name, first name, and start and end employment dates.
SELECT department2.dept_no, department2.dept_name, dept_manager.emp_no, employees.last_name, employees.first_name, dept_manager.from_date, dept_manager.to_date
FROM department2
JOIN dept_manager
ON department2.dept_no = dept_manager.dept_no
JOIN employees
ON dept_manager.emp_no = employees.emp_no;

--List the department of each employee with the following information: employee number, last name, first name, and department name.
SELECT dept_emp.emp_no, employees.last_name, employees.first_name, department2.dept_name
FROM dept_emp
JOIN employees
ON dept_emp.emp_no = employees.emp_no
JOIN department2
ON dept_emp.dept_no = department2.dept_no;


--List all employees whose first name is "Hercules" and last names begin with "B."
SELECT first_name, last_name
FROM employees
WHERE last_name like 'B%'
AND first_name = 'Hercules'
ORDER BY last_name;


--List all employees in the Sales department, including their employee number, last name, first name, and department name.
SELECT dept_emp.emp_no, employees.last_name, employees.first_name, department2.dept_name
FROM dept_emp
JOIN employees
ON dept_emp.emp_no = employees.emp_no
JOIN department2
ON dept_emp.dept_no = department2.dept_no
WHERE department2.dept_name = 'Sales';

--List all employees in the Sales and Development departments, including their employee number, last name, first name, and department name.
SELECT dept_emp.emp_no, employees.last_name, employees.first_name, department2.dept_name
FROM dept_emp
JOIN employees
ON dept_emp.emp_no = employees.emp_no
JOIN department2
ON dept_emp.dept_no = department2.dept_no
WHERE department2.dept_name = 'Sales' 
OR department2.dept_name = 'Development';


--In descending order, list the frequency count of employee last names, i.e., how many employees share each last name.
SELECT last_name,
COUNT(last_name) AS "frequency"
FROM employees
GROUP BY last_name
ORDER BY
COUNT(last_name) DESC;



